<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Plugin\CheckoutLayout;

use Aheadworks\OneStepCheckout\Block\Checkout;
use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Logger\Logger;
use Magento\Framework\Serialize\SerializerInterface;

/**
 * Checkout Layout Modifier for AW Checkout
 */
class AheadworksOsc
{
    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    public $configHelper;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    public $logger;

    /**
     * @var \Magento\Framework\Serialize\SerializerInterface
     */
    public $serializer;

    /**
     * CheckoutLayout constructor.
     *
     * @param \Geissweb\Euvat\Helper\Configuration             $config
     * @param \Geissweb\Euvat\Logger\Logger                    $logger
     * @param \Magento\Framework\Serialize\SerializerInterface $serializer
     */
    public function __construct(
        Configuration $config,
        Logger $logger,
        SerializerInterface $serializer
    ) {
        $this->configHelper = $config;
        $this->logger = $logger;
        $this->serializer = $serializer;
    }

    /**
     * Change our stuff
     *
     * @param \Aheadworks\OneStepCheckout\Block\Checkout $subject
     * @param string $originalJsLayout
     *
     * @return string $jsLayout
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function afterGetJsLayout(
        Checkout $subject,
        $originalJsLayout
    ) {
        if (!$this->configHelper->isValidationEnabled()) {
            return $originalJsLayout;
        }

        $jsLayout = $this->serializer->unserialize($originalJsLayout);
        //$this->logger->vatDebug("Aheadworks complete OriginalLayout: ".var_export($jsLayout, true));
        $originalFieldLayout = [];
        $keyForVatField = null;

        if (isset($jsLayout['components']['checkout']['children']['shippingAddress']['children']
            ['shipping-address-fieldset']['children'])
        ) {
            foreach ($jsLayout['components']['checkout']['children']['shippingAddress']['children']
                ['shipping-address-fieldset']['children'] as $key => $fieldsetChild) {
                $this->logger->customLog('checking ' . $key);
                if (isset($fieldsetChild['children']['vat_id'])) {
                    $keyForVatField = $key;
                    $originalFieldLayout = $fieldsetChild['children']['vat_id'];
                }
            }
        }
        if ($keyForVatField === null) {
            return $originalJsLayout;
        }

        $configParam = isset($originalFieldLayout['config']) ? $originalFieldLayout['config'] : [];
        $fieldLayout = [
            'label' => __('VAT Number'),
            'component' => 'Geissweb_Euvat/js/form/element/vat-number-aheadworks',
            'config' => $this->configHelper->getVatFieldConfigAheadworks($configParam, 'shippingAddress'),
            'dataScope' => 'shippingAddress.vat_id',
            'dataScopePrefix' => 'shippingAddress',
            'visible' => true,
            'sortOrder' => 120,
            'validation' => $this->configHelper->getFieldValidationAtCheckout()
        ];
        $fieldLayout = array_merge($originalFieldLayout, $fieldLayout);
        $jsLayout['components']['checkout']['children']['shippingAddress']['children']
        ['shipping-address-fieldset']['children'][$keyForVatField]['children']['vat_id'] = $fieldLayout;

        //Add to billing address
        $originalBillingFieldLayout = [];
        $keyForBillingVatField = null;
        if (isset($jsLayout['components']['checkout']['children']['paymentMethod']['children']['billingAddress']
            ['children']['billing-address-fieldset']['children'])) {
            foreach ($jsLayout['components']['checkout']['children']['paymentMethod']['children']['billingAddress']
                     ['children']['billing-address-fieldset']['children'] as $key => $fieldsetChild) {
                $this->logger->customLog('checking ' . $key);
                if (isset($fieldsetChild['children']['vat_id'])) {
                    $keyForBillingVatField = $key;
                    $originalBillingFieldLayout = $fieldsetChild['children']['vat_id'];
            //$this->logger->vatDebug("Aheadworks OriginalBillingLayout: ".var_export($originalBillingFieldLayout, true));
                }
            }
        }

        if ($keyForBillingVatField !== null) {
            $configParam = isset($originalBillingFieldLayout['config']) ? $originalBillingFieldLayout['config'] : [];
            $fieldLayout = [
                'label' => __('VAT Number'),
                'component' => 'Geissweb_Euvat/js/form/element/vat-number-aheadworks',
                'config' => $this->configHelper->getVatFieldConfigAheadworks($configParam, 'billingAddress'),
                'dataScope' => 'billingAddress.vat_id',
                'dataScopePrefix' => 'billingAddress',
                'visible' => true,
                'sortOrder' => 120,
                'validation' => $this->configHelper->getFieldValidationAtCheckout()
            ];
            $billingFieldLayout = array_merge($originalBillingFieldLayout, $fieldLayout);
            $jsLayout['components']['checkout']['children']['paymentMethod']['children']['billingAddress']['children']
            ['billing-address-fieldset']['children'][$keyForBillingVatField]
            ['children']['vat_id'] = $billingFieldLayout;
        }

        $this->logger->customLog(var_export($jsLayout, true));
        return $this->serializer->serialize($jsLayout);
    }
}
