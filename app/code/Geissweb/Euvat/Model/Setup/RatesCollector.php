<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */
declare(strict_types=1);

namespace Geissweb\Euvat\Model\Setup;

use Geissweb\Euvat\Helper\Compat\JsonFactory;
use Geissweb\Euvat\Logger\Logger;
use GuzzleHttp\Client;
use GuzzleHttp\ClientFactory;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\ResponseFactory;
use Magento\Framework\Webapi\Rest\Request;
use Magento\Setup\Exception;

class RatesCollector
{
    /**
     * API request URL
     */
    const API_REQUEST_URI = 'https://api.geissweb.de/vatrates/';

    /**
     * @var ResponseFactory
     */
    private $responseFactory;

    /**
     * @var ClientFactory
     */
    private $clientFactory;

    /**
     * @var \Magento\Framework\Serialize\Serializer\Json|\Magento\Framework\Json\EncoderInterface
     */
    private $serializer;
    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    private $logger;

    /**
     * GitApiService constructor
     *
     * @param ClientFactory $clientFactory
     * @param ResponseFactory $responseFactory
     * @param JsonFactory $jsonFactory
     * @param \Geissweb\Euvat\Logger\Logger $logger
     */
    public function __construct(
        ClientFactory $clientFactory,
        ResponseFactory $responseFactory,
        JsonFactory $jsonFactory,
        Logger $logger
    ) {
        $this->clientFactory = $clientFactory;
        $this->responseFactory = $responseFactory;
        $this->serializer = $jsonFactory->create();
        $this->logger = $logger;
    }

    /**
     * Receives the standard rates for EU countries
     *
     * @return array
     */
    public function getStandardRates()
    {
        $response = $this->doRequest('standard');
        $responseContent = $response->getBody()->getContents();

        $this->logger->customLog('[RatesCollector] response
        ('.$response->getStatusCode().$response->getReasonPhrase().') :'.var_export($responseContent, true));

        try {
            $rates = $this->serializer->unserialize($responseContent);
            $this->logger->customLog('[RatesCollector] rates', $rates);
            return $rates;
        } catch (Exception $e) {
            $this->logger->critical($e);
            $this->logger->customLog('[RatesCollector] Error: '.$e->getMessage());
        }

        return [
            'AT' => 20,
            'BE' => 21,
            'BG' => 20,
            'CY' => 19,
            'CZ' => 21,
            'DE' => 19,
            'DK' => 25,
            'EE' => 20,
            'GB' => 20,
            'GR' => 24,
            'ES' => 21,
            'FI' => 24,
            'FR' => 20,
            'HR' => 25,
            'HU' => 27,
            'IE' => 23,
            'IT' => 22,
            'LT' => 21,
            'LU' => 17,
            'LV' => 21,
            'MT' => 18,
            'NL' => 21,
            'PL' => 23,
            'PT' => 23,
            'RO' => 19,
            'SE' => 25,
            'SI' => 22,
            'SK' => 20
        ];
    }

    /**
     * Request data from API
     *
     * @param string $uriEndpoint
     * @param array $params
     * @param string $requestMethod
     *
     * @return \GuzzleHttp\Psr7\Response|\Psr\Http\Message\ResponseInterface
     */
    private function doRequest(
        string $uriEndpoint,
        array $params = [],
        string $requestMethod = Request::HTTP_METHOD_GET
    ) {
        /** @var Client $client */
        $client = $this->clientFactory->create([
            'config' => [
                'base_uri' => self::API_REQUEST_URI
            ]
        ]);

        try {
            $response = $client->request($requestMethod, $uriEndpoint, $params);
        } catch (GuzzleException $exception) {
            $response = $this->responseFactory->create([
                'status' => $exception->getCode(),
                'reason' => $exception->getMessage()
            ]);
        }

        return $response;
    }
}
