<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Controller\Vatnumber;

use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Helper\VatNumber\Formatter;
use Geissweb\Euvat\Validator\Service as ValidatorService;
use Magento\Framework\App\Action\Context;
use Magento\Framework\App\ActionInterface;
use Magento\Framework\App\Request\Http;
use Magento\Framework\App\RequestInterface;
use Magento\Framework\Controller\Result\Json as JsonResult;
use Magento\Framework\Controller\Result\Raw as RawResult;
use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\Data\Form\FormKey\Validator;

/**
 * Class Validation
 * Executes the validation and gives JSON back
 */
class Validation implements ActionInterface
{
    /**
     * @var Context
     */
    public $context;
    /**
     * @var Configuration
     */
    public $configHelper;
    /**
     * @var ValidatorService
     */
    private $validator;
    /**
     * @var Formatter
     */
    private $formatter;
    /**
     * @var Http|RequestInterface
     */
    private $request;
    /**
     * @var ResultFactory
     */
    private $resultFactory;
    /**
     * @var Validator
     */
    private $formKeyValidator;

    /**
     * Constructor
     *
     * @param Context $context
     * @param ValidatorService $validator
     * @param Validator $formKeyValidator
     * @param Configuration $configHelper
     * @param Formatter $formatter
     */
    public function __construct(
        Context $context,
        ValidatorService $validator,
        Validator $formKeyValidator,
        Configuration $configHelper,
        Formatter $formatter
    ) {
        $this->context = $context;
        $this->request = $context->getRequest();
        $this->resultFactory = $context->getResultFactory();
        $this->formKeyValidator = $formKeyValidator;
        $this->configHelper = $configHelper;
        $this->validator = $validator;
        $this->formatter = $formatter;
    }

    /**
     * Execute VAT number validation
     *
     * @return JsonResult|RawResult
     * @throws \SoapFault
     */
    public function execute()
    {
        if ($this->getRequest()->getMethod() !== 'GET'
            || !$this->getRequest()->isXmlHttpRequest()
            || !$this->formKeyValidator->validate($this->getRequest())
        ) {
            /** @var RawResult $resultRaw */
            $resultRaw = $this->resultFactory->create(ResultFactory::TYPE_RAW);
            $resultRaw->setContents('This action is not allowed.');
            return $resultRaw->setHttpResponseCode(400);
        }

        $vatNumber = $this->getRequest()->getParam('vat_number');
        $data = $this->formatter->splitVatNumber($vatNumber, true);
        $response = $this->validator->validate($data['cc'], $data['number']);

        /** @var JsonResult $resultJson */
        $resultJson = $this->resultFactory->create(ResultFactory::TYPE_JSON);
        return $resultJson->setData($response);
    }

    /**
     * @return Http
     */
    private function getRequest()
    {
        return $this->request; // @phpstan-ignore-line
    }
}
