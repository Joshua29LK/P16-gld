<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Plugin;

use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Helper\Functions;
use Geissweb\Euvat\Logger\Logger;
use Geissweb\Euvat\Model\ValidationFactory;
use Geissweb\Euvat\Model\ValidationRepository;
use Magento\Framework\Exception\CouldNotSaveException;
use Geissweb\Euvat\Api\Data\ValidationInterface;
use Geissweb\Euvat\Model\ValidationInterfaceFactory;
use Magento\Sales\Api\Data\OrderInterface;
use Magento\Sales\Api\Data\OrderAddressInterface;
use Magento\Sales\Api\Data\OrderStatusHistoryInterfaceFactory;
use Magento\Sales\Api\OrderManagementInterface;
use Magento\Sales\Api\OrderStatusHistoryRepositoryInterface;

/**
 * Class OrderManagement adds order comment and sets customer group on guest order
 */
class OrderManagement
{
    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    private $configHelper;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    private $logger;

    /**
     * @var \Geissweb\Euvat\Helper\Functions
     */
    private $functionsHelper;

    /**
     * @var \Geissweb\Euvat\Model\ValidationRepository
     */
    private $validationRepository;

    /**
     * @var \Geissweb\Euvat\Model\Validation
     */
    private $validationInterfaceFactory;
    /**
     * @var \Magento\Sales\Api\Data\OrderStatusHistoryInterfaceFactory
     */
    private $orderStatusHistoryFactory;
    /**
     * @var \Magento\Sales\Api\OrderStatusHistoryRepositoryInterface
     */
    private $orderStatusHistoryRepository;

    /**
     * OrderManagement constructor.
     *
     * @param \Geissweb\Euvat\Helper\Configuration $configHelper
     * @param \Geissweb\Euvat\Helper\Functions $functionsHelper
     * @param \Geissweb\Euvat\Model\ValidationRepository $validationRepository
     * @param \Geissweb\Euvat\Model\ValidationInterfaceFactory $validationFactory
     * @param \Geissweb\Euvat\Logger\Logger $logger
     * @param \Magento\Sales\Api\Data\OrderStatusHistoryInterfaceFactory $orderStatusHistoryFactory
     * @param \Magento\Sales\Api\OrderStatusHistoryRepositoryInterface $orderStatusHistoryRepository
     */
    public function __construct(
        Configuration $configHelper,
        Functions $functionsHelper,
        ValidationRepository $validationRepository,
        ValidationFactory $validationFactory,
        Logger $logger,
        OrderStatusHistoryInterfaceFactory $orderStatusHistoryFactory,
        OrderStatusHistoryRepositoryInterface $orderStatusHistoryRepository
    ) {
        $this->configHelper = $configHelper;
        $this->logger = $logger;
        $this->functionsHelper = $functionsHelper;
        $this->validationRepository = $validationRepository;
        $this->validationInterfaceFactory = $validationFactory;
        $this->orderStatusHistoryFactory = $orderStatusHistoryFactory;
        $this->orderStatusHistoryRepository = $orderStatusHistoryRepository;
    }

    /**
     * Assigns customer group to guest order
     *
     * @param OrderManagementInterface $subject
     * @param OrderInterface $order
     *
     * @return \Magento\Sales\Api\Data\OrderInterface[]
     */
    public function beforePlace(
        \Magento\Sales\Api\OrderManagementInterface $subject,
        \Magento\Sales\Api\Data\OrderInterface $order
    ) {
        $this->logger->customLog("beforePlaceOrder START orderId = " . $order->getEntityId());

        if ($order->getCustomerIsGuest()
            && $this->configHelper->getUseGroupAssignment()
            && $this->configHelper->isAssignCustomerGroupToGuestOrder()
        ) {
            try {
                $address = $this->_getAddressFromOrder($order);
                if (!$address) {
                    $this->logger->customLog("beforePlaceOrder NO address found.");
                    return [$order];
                }

                $vatId = $address->getVatId();
                if (!empty($vatId)) {
                    /** @var \Geissweb\Euvat\Api\Data\ValidationInterface $validation */
                    $validation = $this->validationRepository->getByVatId($vatId);
                } else {
                    $validation = $this->validationInterfaceFactory->create();
                }

                // Assign customer group to guest order
                $customerGroupForOrder = $this->functionsHelper->getCustomerGroup($address, $validation);
                $this->logger->customLog("beforePlaceOrder Setting group_id: " . $customerGroupForOrder);
                $order->setCustomerGroupId($customerGroupForOrder);
            } catch (\Exception $e) {
                $this->logger->critical($e);
            }
        }

        $this->logger->customLog("beforePlaceOrder END");

        return [$order];
    }

    /**
     * Adds order comment
     *
     * @param OrderManagementInterface $subject
     * @param OrderInterface $order
     *
     * @return OrderInterface
     */
    public function afterPlace(
        OrderManagementInterface $subject,
        OrderInterface $order
    ) {
        $this->logger->customLog("AfterPlaceOrder START orderId = " . $order->getEntityId());
        try {
            $address = $this->_getAddressFromOrder($order);
            if ($address == false || $address == null) {
                $this->logger->customLog("AfterPlaceOrder NO address found.");
                return $order;
            }

            $vatId = $address->getVatId();
            if (!empty($vatId)) {
                /** @var \Geissweb\Euvat\Api\Data\ValidationInterface $validation */
                $validation = $this->validationRepository->getByVatId($vatId);
                if ($validation instanceof \Geissweb\Euvat\Api\Data\ValidationInterface) {
                    // Add order comment with VAT validation data
                    $comment = $this->_compileOrderComment($validation);
                    if (!empty($comment)) {
                        $this->logger->customLog("AfterPlaceOrder Adding comment: " . $comment);

                        /** @var \Magento\Sales\Api\Data\OrderStatusHistoryInterface $statusHistory */
                        $statusHistory = $this->orderStatusHistoryFactory->create();
                        $statusHistory->setParentId($order->getEntityId());
                        $statusHistory->setEntityName('order');
                        $statusHistory->setComment($comment);
						$statusHistory->setStatus($order->getStatus());
                        $statusHistory->setIsVisibleOnFront(0);
                        $statusHistory->setIsCustomerNotified(0);
                        $this->orderStatusHistoryRepository->save($statusHistory);
                    }
                }
            }
        } catch (CouldNotSaveException $e) {
            $this->logger->critical($e);
        }

        $this->logger->customLog("AfterPlaceOrder END");

        return $order;
    }

    /**
     * Gets the address the VAT calculation is based on
     *
     * @param OrderInterface $order
     *
     * @return bool|OrderAddressInterface
     */
    private function _getAddressFromOrder(OrderInterface $order)
    {
        $vatBasedOn = $this->configHelper->getVatBasedOn();
        if ($vatBasedOn == 'shipping' && $order->getIsNotVirtual()) {
            $address = $order->getShippingAddress();
        } else {
            $address = $order->getBillingAddress();
        }

        if (!$address instanceof OrderAddressInterface) {
            $this->logger->customLog("address, getting again from order");
            return $this->functionsHelper->getBasedOnAddressFromOrder($order, $vatBasedOn);
        }

        return $address;
    }

    /**
     * Put together order comment with validation info
     *
     * @param ValidationInterface $validation
     *
     * @return string
     */
    private function _compileOrderComment(ValidationInterface $validation): string
    {
        $vatId = $validation->getVatId();
        $vatTraderName = $validation->getVatTraderName();
        $vatTraderAddress = $validation->getVatTraderAddress();
        $vatIsValid = $validation->getVatIsValid();
        $vatReqSuccess = $validation->getVatRequestSuccess();
        $vatReqId = $validation->getVatRequestId();

        $comment = '';
        $comment .= __('VAT number') . ": " . $vatId . "<br/>";
        if (!empty($vatTraderName)) {
            $comment .= __('VAT Trader Name') . ": " . $vatTraderName . "<br/>";
        }
        if (!empty($vatTraderAddress)) {
            $comment .= __('VAT Trader Address') . ": " . $vatTraderAddress . "<br/>";
        }
        $comment .= __('VAT number is') . ": ";
        $comment .= ($vatIsValid) ? __('valid') : __('invalid');
        $comment .= "<br/>";
        $comment .= __('VAT request success') . ": ";
        $comment .= ($vatReqSuccess) ? __('Yes') : __('No');
        $comment .= "<br/>";
        if ($vatReqSuccess && !empty($vatReqId)) {
            $comment .= __('VAT request identifier') . ": " . $vatReqId;
        }

        return $comment;
    }
}
