<?php $divId = 'tree' . $block->getId() ?>
<div id="<?php /* @escapeNotVerified */ echo $divId ?>" class="tree"></div>
<!--[if IE]>
<script id="ie-deferred-loader" defer="defer" src="//:"></script>
<![endif]-->
<script>
    require([
        'jquery',
        'prototype',
        'extjs/ext-tree-checkbox'
    ], function (jQuery) {
        var tree<?php /* @escapeNotVerified */ echo $block->getId() ?>;

        Ext.tree.TreePanel.Enhanced = function (el, config) {
            Ext.tree.TreePanel.Enhanced.superclass.constructor.call(this, el, config);
        };

        Ext.extend(Ext.tree.TreePanel.Enhanced, Ext.tree.TreePanel, {

            loadTree: function (config, firstLoad) {
                var parameters = config['parameters'];
                var data = config['data'];
                var root = new Ext.tree.TreeNode(parameters);

                this.nodeHash = {};
                this.setRootNode(root);

                if (firstLoad) {
                    <?php if ($block->getNodeClickListener()): ?>
                        this.addListener('click', <?php /* @escapeNotVerified */ echo $block->getNodeClickListener() ?>.createDelegate(this));
                    <?php endif; ?>
                }

                this.loader.buildCmsPageTree(root, data);
                this.el.dom.innerHTML = '';
                this.render();
            }
        });

        jQuery(function () {
            var emptyNodeAdded = <?php /* @escapeNotVerified */ echo($block->getWithEmptyNode() ? 'false' : 'true') ?>;
            var cmsPageTreeLoader = new Ext.tree.TreeLoader({
                dataUrl: '<?php /* @escapeNotVerified */ echo $block->getLoadTreeUrl() ?>'
            });

            cmsPageTreeLoader.buildCmsPageTree = function (parent, config) {
                if (!config) return null;


                if (parent && config && config.length) {
                    for (var i = 0; i < config.length; i++) {
                        var node;

                        var _node = Object.clone(config[i]);

                        // Add empty node to reset filter
                        if (!emptyNodeAdded) {
                            var empty = Object.clone(_node);
                            empty.text = '<?php /* @escapeNotVerified */ echo __('None') ?>';
                            empty.children = [];
                            empty.id = 'none';
                            empty.path = '1/none';
                            empty.cls = 'leaf';
                            parent.appendChild(new Ext.tree.TreeNode(empty));
                            emptyNodeAdded = true;
                        }

                        if (_node.children && !_node.children.length) {
                            delete(_node.children);
                            node = new Ext.tree.AsyncTreeNode(_node);
                        } else {
                            node = new Ext.tree.TreeNode(config[i]);
                        }
                        parent.appendChild(node);
                        node.loader = node.getOwnerTree().loader;
                        node.loader = node.getOwnerTree().loader;
                        if (_node.children) {
                            this.buildCmsPageTree(node, _node.children);
                        }
                    }
                }
            };

            cmsPageTreeLoader.createNode = function (config) {
                var node;
                var _node = Object.clone(config);
                if (config.children && !config.children.length) {
                    delete(config.children);
                    node = new Ext.tree.AsyncTreeNode(config);
                } else {
                    node = new Ext.tree.TreeNode(config);
                }
                return node;
            };

            cmsPageTreeLoader.buildHash = function (node) {
                var hash = {};
                hash = this.toArray(node.attributes);
                if (node.childNodes.length > 0 || (node.loaded == false && node.loading == false)) {
                    hash['children'] = new Array;

                    for (var i = 0, len = node.childNodes.length; i < len; i++) {
                        if (!hash['children']) {
                            hash['children'] = new Array;
                        }
                        hash['children'].push(this.buildHash(node.childNodes[i]));
                    }
                }

                return hash;
            };

            cmsPageTreeLoader.toArray = function (attributes) {
                var data = {};
                for (var key in attributes) {
                    var value = attributes[key];
                    data[key] = value;
                }

                return data;
            };

            cmsPageTreeLoader.on("beforeload", function (treeLoader, node) {
                $('<?php /* @escapeNotVerified */ echo $divId; ?>').fire('category:beforeLoad', {treeLoader: treeLoader});
                treeLoader.baseParams.id = node.attributes.id;
            });

            tree<?php /* @escapeNotVerified */ echo $block->getId() ?> = new Ext.tree.TreePanel.Enhanced('<?php /* @escapeNotVerified */ echo $divId ?>', {
                animate: false,
                loader: cmsPageTreeLoader,
                enableDD: false,
                containerScroll: true,
                rootVisible: '<?php /* @escapeNotVerified */ echo $block->getRoot()->getIsVisible() ?>',
                useAjax: true,
                currentNodeId: '<?php /* @escapeNotVerified */ echo (int)$block->getTreeId() ?>',
                addNodeTo: false
            });

            // set the root node
            var parameters = {
                text:        <?php /* @escapeNotVerified */ echo json_encode(
                htmlentities($block->getRoot()->getTitle())
            ) ?>,
                draggable: false,
                id:          <?php echo (int)$block->getRoot()->getTreeId() ?>,
                expanded:    <?php echo (int)$block->isTreeExpanded() ?>,
                tree_id:     <?php echo (int)$block->getTreeId() ?>,
                page_id:     <?php echo (int)$block->getPageId() ?>
            };

            tree<?php /* @escapeNotVerified */ echo $block->getId() ?>.loadTree({
                parameters: parameters,
                data:<?php /* @escapeNotVerified */ echo $block->getTreeJson() ?>}, true);

        });

    });
</script>
