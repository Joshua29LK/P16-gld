<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Observer;

use Geissweb\Euvat\Helper\Functions;
use Geissweb\Euvat\Logger\Logger;
use Geissweb\Euvat\Validator\ServiceFactory;
use Geissweb\Euvat\Model\ValidationRepository;
use Geissweb\Euvat\Helper\VatNumber\Formatter;
use Magento\Customer\Model\ResourceModel\AddressRepository;
use Magento\Framework\Event\ManagerInterface as EventManager;
use Magento\Framework\Event\Observer;
use Magento\Framework\Event\ObserverInterface;
use Magento\Framework\Exception\LocalizedException;
use SoapFault;

/**
 * Class CustomerLogin validates existing VAT numbers on customer addresses
 */
class CustomerLogin implements ObserverInterface
{
    /**
     * @var ValidationRepository
     */
    public $validationRepository;

    /**
     * @var Logger
     */
    public $logger;

    /**
     * @var EventManager
     */
    public $eventManager;

    /**
     * @var Functions
     */
    private $functionsHelper;

    /**
     * @var ServiceFactory
     */
    private $serviceFactory;

    /**
     * @var AddressRepository
     */
    private $addressRepository;
    /**
     * @var Formatter
     */
    private $formatter;

    /**
     * Constructor
     *
     * @param ValidationRepository $validationRepository
     * @param ServiceFactory       $serviceFactory
     * @param Functions            $functionsHelper
     * @param Formatter            $formatter
     * @param Logger               $logger
     * @param AddressRepository    $addressRepository
     * @param EventManager         $eventManager
     */
    public function __construct(
        ValidationRepository $validationRepository,
        ServiceFactory $serviceFactory,
        Functions $functionsHelper,
        Formatter $formatter,
        Logger $logger,
        AddressRepository $addressRepository,
        EventManager $eventManager
    ) {
        $this->validationRepository = $validationRepository;
        $this->logger = $logger;
        $this->functionsHelper = $functionsHelper;
        $this->serviceFactory = $serviceFactory;
        $this->addressRepository = $addressRepository;
        $this->eventManager = $eventManager;
        $this->formatter = $formatter;
    }

    /**
     * Runs the magic
     *
     * @param Observer $observer
     */
    public function execute(Observer $observer)
    {
        try {
            if (!$this->functionsHelper->configHelper->isPeriodicRevalidationEnabled()) {
                return;
            }

            /** @var \Magento\Customer\Model\Customer|\Magento\Customer\Model\Data\Customer $customer */
            $customer = $observer->getEvent()->getCustomer();
            $addresses = $customer->getAddresses();
            if ($addresses === null) {
                return;
            }

            /** @var \Magento\Customer\Model\Address $address */
            foreach ($addresses as $address) {
                $vatId = $this->formatter->formatVatNumber($address->getVatId(), $address->getCountryId());
                if (empty($vatId) || $vatId === true) {
                    continue;
                }
                $this->logger->customLog("[CustomerLoginObserver] address with vatid: $vatId");
                $needValidate = $this->functionsHelper->getNeedToValidate($vatId);

                if ($needValidate) {
                    $vatNumber = $this->formatter->splitVatNumber($vatId);
                    /** @var \Geissweb\Euvat\Validator\Vies|\Geissweb\Euvat\Validator\Hmrc $service */
                    $service = $this->serviceFactory->create($vatNumber['cc']);
                    $this->logger->customLog("[CustomerLoginObserver] Now revalidating: $vatId");
                    $service->setParam('countryCode', $vatNumber['cc']);
                    $service->setParam('vatNumber', $vatNumber['number']);
                    $service->validate();
                    /** @var \Geissweb\Euvat\Api\Data\ValidationResultInterface $response */
                    $response = $service->getResult();
                    if ($response->getVatRequestSuccess()) {
                        $this->eventManager->dispatch('vat_validation_after', [
                            'validation_result' => $response
                        ]);
                    }

                    $addressUpdateData = [
                        'vat_id' => $vatId,
                        'vat_is_valid' => $response->getVatIsValid(),
                        'vat_request_date' => $response->getVatRequestDate(),
                        'vat_request_id' => $response->getVatRequestId(),
                        'vat_request_success' => $response->getVatRequestSuccess(),
                        'vat_trader_name' => $response->getVatTraderName(),
                        'vat_trader_address' => $response->getVatTraderAddress()
                    ];
                    /** @var \Magento\Customer\Model\Data\Address $repoAddress */
                    $repoAddress = $this->addressRepository->getById($address->getId());
                    foreach ($addressUpdateData as $key => $data) {
                        $repoAddress->setData($key, $data);
                    }
                    $this->addressRepository->save($repoAddress);
                    $this->logger->customLog("[CustomerLoginObserver] revalidated data for $vatId");
                }
            }

        } catch (\SoapFault $e) {
            $this->logger->critical($e->faultstring);
        } catch (LocalizedException|\Exception $e) {
            $this->logger->critical($e);
        }
    }
}
