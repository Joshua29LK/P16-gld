<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Model;

use Geissweb\Euvat\Api\Data\ValidationInterface;
use Geissweb\Euvat\Api\Data\ValidationInterfaceFactory;
use Geissweb\Euvat\Api\Data\ValidationSearchResultsInterfaceFactory;
use Geissweb\Euvat\Api\ValidationRepositoryInterface;
use Geissweb\Euvat\Model\ResourceModel\Validation as ResourceValidation;
use Geissweb\Euvat\Model\ResourceModel\Validation\CollectionFactory as ValidationCollectionFactory;

use Magento\Framework\Api\DataObjectHelper;
use Magento\Framework\Reflection\DataObjectProcessor;
use Magento\Framework\Api\SearchCriteria\CollectionProcessorInterface;

use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\Exception\CouldNotDeleteException;
use Magento\Framework\Exception\NoSuchEntityException;

/**
 * Class ValidationRepository
 * Repository for VAT number validation results (database represendation)
 */
class ValidationRepository implements ValidationRepositoryInterface
{
    /**
     * @var DataObjectHelper
     */
    protected $dataObjectHelper;

    /**
     * @var ValidationSearchResultsInterfaceFactory
     */
    protected $searchResultsFactory;

    /**
     * @var ValidationFactory
     */
    protected $validationFactory;

    /**
     * @var ValidationCollectionFactory
     */
    protected $validationCollectionFactory;

    /**
     * @var ResourceValidation
     */
    protected $resource;

    /**
     * @var DataObjectProcessor
     */
    protected $dataObjectProcessor;

    /**
     * @var ValidationInterfaceFactory
     */
    protected $dataValidationFactory;
    /**
     * @var \Magento\Framework\Api\SearchCriteria\CollectionProcessorInterface
     */
    private $collectionProcessor;

    /**
     * @param ResourceValidation $resource
     * @param ValidationFactory $validationFactory
     * @param ValidationInterfaceFactory $dataValidationFactory
     * @param ValidationCollectionFactory $validationCollectionFactory
     * @param ValidationSearchResultsInterfaceFactory $searchResultsFactory
     * @param DataObjectHelper $dataObjectHelper
     * @param DataObjectProcessor $dataObjectProcessor
     * @param \Magento\Framework\Api\SearchCriteria\CollectionProcessorInterface $collectionProcessor
     */
    public function __construct(
        ResourceValidation $resource,
        ValidationFactory $validationFactory,
        ValidationInterfaceFactory $dataValidationFactory,
        ValidationCollectionFactory $validationCollectionFactory,
        ValidationSearchResultsInterfaceFactory $searchResultsFactory,
        DataObjectHelper $dataObjectHelper,
        DataObjectProcessor $dataObjectProcessor,
        CollectionProcessorInterface $collectionProcessor
    ) {
        $this->resource = $resource;
        $this->validationFactory = $validationFactory;
        $this->validationCollectionFactory = $validationCollectionFactory;
        $this->searchResultsFactory = $searchResultsFactory;
        $this->dataObjectHelper = $dataObjectHelper;
        $this->dataValidationFactory = $dataValidationFactory;
        $this->dataObjectProcessor = $dataObjectProcessor;
        $this->collectionProcessor = $collectionProcessor;
    }

    /**
     * @inheritDoc
     */
    public function get(int $validationId) : ValidationInterface
    {
        $validation = $this->validationFactory->create();
        $this->resource->load($validation, $validationId);
        if (!$validation->getId()) {
            throw new NoSuchEntityException(__('Validation with id "%1" does not exist.', $validationId));
        }
        return $validation;
    }

    /**
     * Get existing validation data
     *
     * @param null|string $vatId
     *
     * @return bool|ValidationInterface
     */
    public function getByVatId(?string $vatId)
    {
        if ($vatId === null) {
            return false;
        }
        $validation = $this->validationFactory->create();
        $this->resource->load($validation, $vatId, 'vat_id');
        if (!$validation->getId()) {
            return false;
        }
        return $validation;
    }

    /**
     * @inheritDoc
     */
    public function getList(
        \Magento\Framework\Api\SearchCriteriaInterface $criteria
    ): \Magento\Framework\Api\SearchResults {
        $collection = $this->validationCollectionFactory->create();

        $this->collectionProcessor->process($criteria, $collection);

        $searchResults = $this->searchResultsFactory->create();
        $searchResults->setSearchCriteria($criteria);

        $items = [];
        foreach ($collection as $model) {
            $items[] = $model;
        }

        $searchResults->setItems($items);
        $searchResults->setTotalCount($collection->getSize());
        return $searchResults;
    }

    /**
     * @inheritdoc
     */
    public function save(
        ValidationInterface $validation
    ) : ValidationInterface {
        try {
            $this->resource->save($validation);
        } catch (\Exception $exception) {
            throw new CouldNotSaveException(__(
                'Could not save the validation: %1',
                $exception->getMessage()
            ));
        }
        return $validation;
    }

    /**
     * @inheritdoc
     */
    public function delete(
        ValidationInterface $validation
    ) : bool {
        try {
            $this->resource->delete($validation);
        } catch (\Exception $exception) {
            throw new CouldNotDeleteException(__(
                'Could not delete the Validation: %1',
                $exception->getMessage()
            ));
        }
        return true;
    }

    /**
     * @inheritdoc
     */
    public function deleteById(int $validationId) : bool
    {
        return $this->delete($this->get($validationId));
    }
}
