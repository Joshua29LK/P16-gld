<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Plugin\Tax;

use Geissweb\Euvat\Api\Data\ValidationInterface;
use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Helper\Threshold\Calculator;
use Geissweb\Euvat\Logger\Logger;
use Geissweb\Euvat\Model\System\Config\Source\DynamicShipping;
use Geissweb\Euvat\Model\ValidationRepository;
use Geissweb\Euvat\Registry\CronQuoteId;
use Magento\Backend\Model\Session\Quote;
use Magento\Customer\Model\Group;
use Magento\Customer\Model\Session;
use Magento\Customer\Model\Address\AddressModelInterface as CustomerAddressInterface;
use Magento\Framework\App\Area;
use Magento\Framework\App\State;
use Magento\Quote\Api\CartRepositoryInterface;
use Magento\Quote\Api\Data\AddressInterface as QuoteAddressInterface;
use Magento\Tax\Model\Config as TaxModelConfig;

/**
 * Class Config
 * Makes some store configuration variables dynamic
 */
class Config
{
    /**
     * @var Configuration
     */
    public $configHelper;

    /**
     * @var ValidationRepository
     */
    public $validationRepository;

    /**
     * @var \Magento\Checkout\Model\Session
     */
    public $checkoutSession;

    /**
     * @var Logger
     */
    public $logger;

    /**
     * @var CartRepositoryInterface
     */
    public $cartRepository;

    /**
     * @var Session
     */
    public $customerSession;

    /**
     * @var int
     */
    public $_customerGroup;

    /**
     * @var array<mixed>
     */
    public $_cartProductDisplayRules;
    /**
     * @var array<mixed>
     */
    public $_catalogProductDisplayRules;
    /**
     * @var array<mixed>
     */
    public $_cartSubtotalDisplayRules;

    /**
     * @var State
     */
    private $appState;
    /**
     * @var Quote
     */
    private $backendSessionQuote;
    /**
     * @var Calculator
     */
    private $thresholdCalculator;
    /**
     * @var CronQuoteId
     */
    private $cronQuoteIdRegistry;

    /**
     * TaxConfig constructor.
     *
     * @param Configuration $configHelper
     * @param ValidationRepository $validationRepository
     * @param \Magento\Checkout\Model\Session $checkoutSession
     * @param Session $customerSession
     * @param CartRepositoryInterface $cartRepository
     * @param State $appState
     * @param Quote $backendSessionQuote
     * @param Logger $logger
     * @param Calculator $thresholdCalc
     *
     * @throws \Magento\Framework\Exception\LocalizedException
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function __construct(
        Configuration $configHelper,
        ValidationRepository $validationRepository,
        \Magento\Checkout\Model\Session $checkoutSession,
        Session $customerSession,
        CartRepositoryInterface $cartRepository,
        State $appState,
        Quote $backendSessionQuote,
        Logger $logger,
        Calculator $thresholdCalc,
        CronQuoteId $cronQuoteIdRegistry
    ) {
        $this->configHelper = $configHelper;
        $this->validationRepository = $validationRepository;
        $this->checkoutSession = $checkoutSession;
        $this->customerSession = $customerSession;
        $this->cartRepository = $cartRepository;
        $this->logger = $logger;
        $this->appState = $appState;
        $this->backendSessionQuote = $backendSessionQuote;
        $this->thresholdCalculator = $thresholdCalc;
        $this->cronQuoteIdRegistry = $cronQuoteIdRegistry;

        //$this->_customerGroup = $this->customerSession->getCustomer()->getGroupId();
        $this->_customerGroup = $this->customerSession->getCustomerGroupId();
        $this->_catalogProductDisplayRules = $this->configHelper->getCatalogPriceDisplayTypeRules();
        $this->_cartProductDisplayRules = $this->configHelper->getCartProductPriceDisplayTypeRules();
        $this->_cartSubtotalDisplayRules = $this->configHelper->getCartSubtotalPriceDisplayTypeRules();
    }

    /**
     * Runs afterDisplayCartSubtotalInclTax
     *
     * @param TaxModelConfig $subject
     * @param bool $result
     *
     * @return bool
     */
    public function afterDisplayCartSubtotalInclTax(TaxModelConfig $subject, bool $result): bool
    {
        $this->logger->customLog('afterDisplayCartSubtotalInclTax default result: ' . (int)$result);
        $this->logger->customLog('afterDisplayCartSubtotalInclTax current group: ' . $this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartSubtotalDisplayRules)) {
            $type = $this->_cartSubtotalDisplayRules[$this->_customerGroup];
            $this->logger->customLog('afterDisplayCartPricesInclTax found rule: ' . $type .
                '(result: ' . (int)$subject::DISPLAY_TYPE_INCLUDING_TAX === $type . ')');
            return $subject::DISPLAY_TYPE_INCLUDING_TAX === $type;
        }
        return $result;
    }

    /**
     * Runs afterDisplayCartSubtotalExclTax
     *
     * @param TaxModelConfig $subject
     * @param bool $result
     *
     * @return bool
     */
    public function afterDisplayCartSubtotalExclTax(TaxModelConfig $subject, bool $result): bool
    {
        $this->logger->customLog('afterDisplayCartSubtotalExclTax default result: ' . (int)$result);
        $this->logger->customLog('afterDisplayCartSubtotalExclTax current group: ' . $this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartSubtotalDisplayRules)) {
            $type = $this->_cartSubtotalDisplayRules[$this->_customerGroup];
            $this->logger->customLog('afterDisplayCartSubtotalExclTax found rule: ' . $type .
                '(result: ' . (int)$subject::DISPLAY_TYPE_EXCLUDING_TAX === $type . ')');
            return $subject::DISPLAY_TYPE_EXCLUDING_TAX === $type;
        }
        return $result;
    }

    /**
     * Runs afterDisplayCartSubtotalBoth
     *
     * @param TaxModelConfig $subject
     * @param bool $result
     *
     * @return bool
     */
    public function afterDisplayCartSubtotalBoth(TaxModelConfig $subject, bool $result): bool
    {
        $this->logger->customLog('afterDisplayCartSubtotalBoth default result: ' . (int)$result);
        $this->logger->customLog('afterDisplayCartSubtotalBoth current group: ' . $this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartSubtotalDisplayRules)) {
            $type = $this->_cartSubtotalDisplayRules[$this->_customerGroup];
            $this->logger->customLog('afterDisplayCartSubtotalExclTax found rule: ' . $type .
                ' (result: ' . (int)$subject::DISPLAY_TYPE_BOTH === $type . ')');
            return $subject::DISPLAY_TYPE_BOTH === $type;
        }
        return $result;
    }

    /**
     * Runs afterDisplayCartPricesInclTax
     *
     * @param TaxModelConfig $subject
     * @param bool $result
     *
     * @return bool
     */
    public function afterDisplayCartPricesInclTax(TaxModelConfig $subject, bool $result): bool
    {
        $this->logger->customLog('afterDisplayCartPricesInclTax default result: ' . (int)$result);
        $this->logger->customLog('afterDisplayCartPricesInclTax current group: ' . $this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartProductDisplayRules)) {
            $type = $this->_cartProductDisplayRules[$this->_customerGroup];
            $this->logger->customLog('afterDisplayCartPricesInclTax found rule: ' . $type);
            return $subject::DISPLAY_TYPE_INCLUDING_TAX === $type;
        }
        return $result;
    }

    /**
     * Runs afterDisplayCartPricesExclTax
     *
     * @param TaxModelConfig $subject
     * @param bool $result
     *
     * @return bool
     */
    public function afterDisplayCartPricesExclTax(TaxModelConfig $subject, bool $result): bool
    {
        $this->logger->customLog('afterDisplayCartPricesExclTax default result: ' . (int)$result);
        $this->logger->customLog('afterDisplayCartPricesExclTax current group: ' . $this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartProductDisplayRules)) {
            $type = $this->_cartProductDisplayRules[$this->_customerGroup];
            $this->logger->customLog('afterDisplayCartPricesExclTax found rule: ' . $type);
            return $subject::DISPLAY_TYPE_EXCLUDING_TAX === $type;
        }
        return $result;
    }

    /**
     * Runs afterDisplayCartPricesBoth
     *
     * @param TaxModelConfig $subject
     * @param bool $result
     *
     * @return bool
     */
    public function afterDisplayCartPricesBoth(TaxModelConfig $subject, bool $result): bool
    {
        $this->logger->customLog('afterDisplayCartPricesBoth default result: ' . (int)$result);
        $this->logger->customLog('afterDisplayCartPricesBoth current group: ' . $this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartProductDisplayRules)) {
            $type = $this->_cartProductDisplayRules[$this->_customerGroup];
            $this->logger->customLog('afterDisplayCartPricesBoth found rule: ' . $type);
            return $subject::DISPLAY_TYPE_BOTH === $type;
        }
        return $result;
    }

    /**
     * Dynamic catalog price display
     *
     *  1 - Excluding tax
     *  2 - Including tax
     *  3 - Both
     *
     * @param TaxModelConfig $subject
     * @param int $type
     *
     * @return int
     */
    public function afterGetPriceDisplayType(TaxModelConfig $subject, int $type): int
    {
        $this->logger->customLog('afterGetPriceDisplayType current group: ' . $this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_catalogProductDisplayRules)) {
            $this->logger->customLog('afterGetPriceDisplayType found rule: ' . $type);
            $type = $this->_catalogProductDisplayRules[$this->_customerGroup];
        }
        $this->logger->customLog('afterGetPriceDisplayType return ' . $type);
        return $type;
    }

    /**
     * Runs afterCrossBorderTradeEnabled
     *
     * @param TaxModelConfig $subject
     * @param bool $result
     *
     * @return bool
     */
    public function afterCrossBorderTradeEnabled(TaxModelConfig $subject, bool $result): bool
    {
        try {
            if ($result) {
                $basedOn = $this->configHelper->getVatBasedOn();
                //Backend
                if ($this->appState->getAreaCode() === Area::AREA_ADMINHTML) {
                    $this->logger->customLog("afterCrossBorderTradeEnabled processing AdminOrder");
                    $backendQuote = $this->backendSessionQuote->getQuote();
                    // To have the correct prices in case the group is for including tax
                    if ($this->configHelper->isNoDynamicGroup($backendQuote->getCustomerGroupId())) {
                        return true;
                    }
                    $basedOnAddress = ($basedOn === 'shipping') ? $backendQuote->getShippingAddress()
                        : $backendQuote->getBillingAddress();

                //Frontend
                } else {
                    // To have the correct prices in case the group is for including tax
                    $currentCustomerGroup = ($this->customerSession->isLoggedIn()) ?
                        $this->customerSession->getCustomer()->getGroupId() : Group::NOT_LOGGED_IN_ID;
                    if ($this->configHelper->isNoDynamicGroup($currentCustomerGroup)) {
                        return true;
                    }
                    $basedOnAddress = $this->getFrontendBasedOnAddress($basedOn);
                }

                if (!$basedOnAddress instanceof QuoteAddressInterface
                    || !$basedOnAddress instanceof CustomerAddressInterface
                ) {
                    $this->logger->customLog("afterCrossBorderTradeEnabled no address found, return");
                    return true;
                }

                $countryId = $basedOnAddress->getCountryId();
                $vatNumber = $basedOnAddress->getVatId();
                if (empty($countryId)) {
                    $this->logger->customLog(
                        "afterCrossBorderTradeEnabled no CountryID found, return",
                        $basedOnAddress->debug()
                    );
                    return $result;
                }

                $this->logger->customLog("afterCrossBorderTradeEnabled isEuCountry($countryId): "
                                     . (int)$this->configHelper->isEuCountry($countryId));

                // GB should still be in the EU countries list
                if ($this->configHelper->getDisableCbtForOutOfEurope()
                    && !$this->configHelper->isEuCountry($countryId)
                ) {
                    $this->logger->customLog("afterCrossBorderTradeEnabled disableCbtForNonEurope");
                    $result = false;
                }

                // When used as non-EU company delivering to EU and threshold is exceeded
                if ($this->configHelper->isEUThresholdEnabled()
                    && $this->configHelper->getDisableCbtForIOSS()
                ) {
                    $this->thresholdCalculator->setConfigSection('ioss_settings');
                    if ($this->thresholdCalculator->isDeliveryToEU()
                        && $this->thresholdCalculator->isCurrentCartAbove(
                            $this->configHelper->getEUThresholdValue(),
                            'EUR'
                        )
                    ) {
                        $this->logger->customLog("afterCrossBorderTradeEnabled disableCbtForIOSS");
                        $result = false;
                    }
                }

                // When used as EU company delivering to UK
                if ($this->configHelper->isUkThresholdEnabled()
                    && $this->configHelper->getDisableCbtForBrexit()
                    && $this->configHelper->getMerchantCountryCode() !== 'GB'
                ) {
                    $this->thresholdCalculator->setConfigSection('brexit_settings');
                    if ($this->thresholdCalculator->isDeliveryToUk()
                        && $this->thresholdCalculator->isCurrentCartAbove(
                            $this->configHelper->getUkThresholdValue(),
                            'GBP'
                        )
                    ) {
                        $this->logger->customLog("afterCrossBorderTradeEnabled brexitThreshold");
                        $result = false;
                    }
                }

                // For valid EU business
                if (!empty($vatNumber) && $this->configHelper->getDisableCbtForEuBusiness()) {
                    /** @var ValidationInterface $validation */
                    $validation = $this->validationRepository->getByVatId($vatNumber);
                    if ($validation && $validation->getVatIsValid()) {
                        $this->logger->customLog("afterCrossBorderTradeEnabled disableCbtForEuBusiness");
                        $result = false;
                    }
                }
            }
            $this->logger->customLog("afterCrossBorderTradeEnabled result: " . (int)$result);
            return $result;
        } catch (\Exception $e) {
            $this->logger->critical($e);
        }
        return $result;
    }

    /**
     * Runs afterGetShippingTaxClass
     *
     * @param TaxModelConfig $subject
     * @param int $result
     *
     * @return int
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function afterGetShippingTaxClass(TaxModelConfig $subject, int $result): int
    {
        $this->logger->customLog("afterGetShippingTaxClass START result: $result");
        $useDynamicShippingTax = $this->configHelper->getUseDynamicShippingTaxClass();
        $defaultProductTaxClass = $this->configHelper->getDefaultProductTaxClass();
        $defaultShippingTaxClass = $this->configHelper->getDefaultShippingTaxClass();
        $reducedProductClass = $this->configHelper->getReducedProductTaxClass();
        $reducedShippingClass = $this->configHelper->getReducedShippingTaxClass();
        $superReducedProductClass = $this->configHelper->getSuperReducedProductTaxClass();
        $superReducedShippingClass = $this->configHelper->getSuperReducedShippingTaxClass();
        $this->logger->customLog("afterGetShippingTaxClass classes", [
            'default product class' => $defaultProductTaxClass,
            'default shipping class' => $defaultShippingTaxClass,
            'reduced product class' => $reducedProductClass,
            'reduced shipping class' => $reducedShippingClass,
            'super reduced product class' => $superReducedProductClass,
            'super reduced shipping class' => $superReducedShippingClass
        ]);

        if ($useDynamicShippingTax > 0 && $reducedProductClass && $reducedShippingClass) {
            $this->logger->customLog("afterGetShippingTaxClass useDynamicShippingTax");

            if ($this->appState->getAreaCode() === Area::AREA_ADMINHTML) {
                $this->logger->customLog("afterGetShippingTaxClass processing AdminOrder");
                $items = $this->backendSessionQuote->getQuote()->getAllVisibleItems();
            } elseif ($this->appState->getAreaCode() === Area::AREA_CRONTAB) {
                $this->logger->customLog("afterGetShippingTaxClass processing CronJob");
                $cronQuoteId = $this->cronQuoteIdRegistry->get();
                if ($cronQuoteId !== null) {
                    $quote = $this->cartRepository->get($cronQuoteId);
                    $items = $quote->getAllVisibleItems();
                }
            } else {
                $this->logger->customLog("afterGetShippingTaxClass processing FrontQuote");
                $quoteId = $this->checkoutSession->getQuoteId();
                if (!empty($quoteId)) {
                    /**@var \Magento\Quote\Model\Quote $quote */
                    $quote = $this->cartRepository->get($quoteId);
                    $items = $quote->getAllVisibleItems();
                }
            }

            if (!isset($items)) {
                $this->logger->customLog("afterGetShippingTaxClass no items found");
                return $result;
            }

            switch ($useDynamicShippingTax) {
                case DynamicShipping::TYPE_BY_RATE_WITH_LARGEST_TOTAL:
                    $this->logger->customLog("afterGetShippingTaxClass TYPE_BY_RATE_WITH_LARGEST_TOTAL");
                    $totals = [];
                    foreach ($items as $item) {
                        $productTaxClassId = (int)$item->getProduct()->getTaxClassId();

                        $this->logger->customLog(sprintf(
                            "Type: %s **** rowTotal: %s **** taxClass: %s",
                            $item->getProductType(),
                            $item->getRowTotal(),
                            $productTaxClassId
                        ), $item->getData());

                        if (isset($totals[$productTaxClassId])) {
                            $totals[$productTaxClassId] += $item->getRowTotal();
                        } else {
                            $totals[$productTaxClassId] = $item->getRowTotal();
                        }
                    }
                    $this->logger->customLog("afterGetShippingTaxClass calculated totals", $totals);

                    $arsortTotals = $asortTotals = $totals;
                    asort($asortTotals);
                    arsort($arsortTotals);

                    if (count($totals) > 1
                        && array_values($asortTotals) === array_values($arsortTotals)
                    ) {
                        $classToUse = $result;
                    } else {
                        reset($arsortTotals);
                        $classToUse = key($arsortTotals);
                    }
                    $this->logger->customLog("afterGetShippingTaxClass calculated product class to use: $classToUse");

                    if ($classToUse === $reducedProductClass) {
                        $this->logger->customLog("afterGetShippingTaxClass using reduced
                        shipping class: $reducedShippingClass");
                        return $reducedShippingClass;
                    } elseif ($classToUse === $superReducedProductClass) {
                        $this->logger->customLog("afterGetShippingTaxClass using super reduced
                        shipping class: $superReducedShippingClass");
                        return $superReducedShippingClass;
                    } else {
                        $this->logger->customLog("afterGetShippingTaxClass using default
                        shipping class: $defaultShippingTaxClass");
                    }
                    break;

                case DynamicShipping::TYPE_BY_RATE_WITH_HIGHEST_RATE:
                    $this->logger->customLog("afterGetShippingTaxClass TYPE_BY_RATE_WITH_HIGHEST_RATE");
                    $classes = [];
                    foreach ($items as $item) {
                        $productTaxClassId = (int)$item->getProduct()->getTaxClassId();
                        $this->logger->customLog(sprintf(
                            "Type: %s **** taxClass: %s",
                            $item->getProductType(),
                            $productTaxClassId
                        ), $item->getData());

                        $classes[] = $productTaxClassId;
                    }
                    $this->logger->customLog("afterGetShippingTaxClass classes for cart items", $classes);
                    if (in_array($defaultProductTaxClass, $classes)) {
                        $this->logger->customLog("afterGetShippingTaxClass using default shipping class");
                        break;
                    }
                    if (in_array($reducedProductClass, $classes)) {
                        $this->logger->customLog("afterGetShippingTaxClass using reduced shipping: $reducedShippingClass");
                        return $reducedShippingClass;
                    }
                    if (in_array($superReducedProductClass, $classes)) {
                        $this->logger->customLog("afterGetShippingTaxClass super reduced: $superReducedShippingClass");
                        return $superReducedShippingClass;
                    }
                    break;

                case DynamicShipping::TYPE_DEFAULT:
                default:
                    break;
            }
        }
        return $result;
    }

    /**
     * Get the quote address for tax calculation based on
     *
     * @param string $basedOn
     *
     * @return QuoteAddressInterface|CustomerAddressInterface
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    private function getFrontendBasedOnAddress(string $basedOn)
    {
        $quoteId = $this->checkoutSession->getQuoteId();
        if (!empty($quoteId)) {
            $this->logger->customLog("afterCrossBorderTradeEnabled processing FrontQuote ID: $quoteId");
            $quote = $this->cartRepository->get($quoteId);
            if ($basedOn == 'shipping' && !$quote->getIsVirtual()) {
                $basedOnAddress = $quote->getShippingAddress();
            } else {
                $basedOnAddress = $quote->getBillingAddress();
            }

            $countryId = $basedOnAddress->getCountryId();
            if (empty($countryId)) {
                $this->logger->customLog(
                    "afterCrossBorderTradeEnabled did not find countryID from quote address, use default"
                );
                if ($basedOn == 'shipping') {
                    $basedOnAddress = $this->customerSession->getCustomer()->getDefaultShippingAddress();
                } else {
                    $basedOnAddress = $this->customerSession->getCustomer()->getDefaultBillingAddress();
                }
            }
        } else {
            $this->logger->customLog("afterCrossBorderTradeEnabled using default addresses");
            if ($basedOn == 'shipping') {
                $basedOnAddress = $this->customerSession->getCustomer()->getDefaultShippingAddress();
            } else {
                $basedOnAddress = $this->customerSession->getCustomer()->getDefaultBillingAddress();
            }
        }
        return $basedOnAddress;
    }
}
