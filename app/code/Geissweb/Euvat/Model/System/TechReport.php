<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */
namespace Geissweb\Euvat\Model\System;

use Magento\Customer\Model\ResourceModel\Group\Collection as CustomerGroupCollection;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Tax\Model\ResourceModel\TaxClass\Collection as TaxClassCollection;
use Magento\Tax\Model\ResourceModel\Calculation\Rule\Collection as TaxRuleCollection;
use Magento\Tax\Model\ResourceModel\Calculation\Rate\Collection as TaxRateCollection;
use Geissweb\Euvat\Helper\Configuration;
use Magento\Store\Api\WebsiteRepositoryInterface;
use Magento\Store\Api\StoreRepositoryInterface;

/**
 * Generates relevant support information
 */
class TechReport
{
    /**
     * @var \Magento\Customer\Model\ResourceModel\Group\Collection
     */
    private $groupCollection;
    /**
     * @var \Magento\Tax\Model\ResourceModel\TaxClass\Collection
     */
    private $taxClassCollection;
    /**
     * @var \Magento\Tax\Model\ResourceModel\Calculation\Rule\Collection
     */
    private $taxRuleCollection;
    /**
     * @var \Magento\Tax\Model\ResourceModel\Calculation\Rate\Collection
     */
    private $taxRateCollection;
    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    private $config;
    /**
     * @var \Magento\Store\Api\WebsiteRepositoryInterface
     */
    private $websiteRepository;
    /**
     * @var \Magento\Store\Api\StoreRepositoryInterface
     */
    private $storeRepository;
    /**
     * @var \Magento\Framework\App\Config\ScopeConfigInterface
     */
    private $scopeConfig;
    /**
     * @var \Magento\Store\Api\Data\WebsiteInterface[]
     */
    private $websiteList = null;
    /**
     * @var \Magento\Store\Api\Data\StoreInterface[]
     */
    private $storesList = null;

    /**
     * @param \Magento\Customer\Model\ResourceModel\Group\Collection $groupCollection
     * @param \Magento\Tax\Model\ResourceModel\TaxClass\Collection $taxClassCollection
     * @param \Magento\Tax\Model\ResourceModel\Calculation\Rule\Collection $taxRuleCollection
     * @param \Magento\Tax\Model\ResourceModel\Calculation\Rate\Collection $taxRateCollection
     * @param \Geissweb\Euvat\Helper\Configuration $config
     * @param \Magento\Store\Api\WebsiteRepositoryInterface $websiteRepository
     * @param \Magento\Store\Api\StoreRepositoryInterface $storeRepository
     * @param \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
     */
    public function __construct(
        CustomerGroupCollection $groupCollection,
        TaxClassCollection $taxClassCollection,
        TaxRuleCollection $taxRuleCollection,
        TaxRateCollection $taxRateCollection,
        Configuration $config,
        WebsiteRepositoryInterface $websiteRepository,
        StoreRepositoryInterface $storeRepository,
        ScopeConfigInterface $scopeConfig
    ) {
        $this->groupCollection = $groupCollection;
        $this->taxClassCollection = $taxClassCollection;
        $this->taxRuleCollection = $taxRuleCollection;
        $this->taxRateCollection = $taxRateCollection;
        $this->config = $config;
        $this->websiteRepository = $websiteRepository;
        $this->storeRepository = $storeRepository;
        $this->scopeConfig = $scopeConfig;
    }

    /**
     * Gets all customer groups
     *
     * @return array|mixed
     */
    public function getCustomerGroups()
    {
        $collection = $this->groupCollection->toArray();
        return $collection['items'] ?? [];
    }

    /**
     * Gets all tax classes
     *
     * @return array|mixed
     */
    public function getTaxClasses()
    {
        $collection = $this->taxClassCollection->toArray();
        return $collection['items'] ?? [];
    }

    /**
     * Gets all tax rules
     *
     * @return array|mixed
     */
    public function getTaxRules()
    {
        $collection = $this->taxRuleCollection->toArray();
        if (isset($collection['items'])) {
            foreach ($collection['items'] as $idx => $item) {
                if (isset($collection['items'][$idx]['tax_rates'])) {
                    unset($collection['items'][$idx]['tax_rates']);
                }
            }
        }
        return $collection['items'] ?? [];
    }

    /**
     * Gets all tax rates
     *
     * @return array|mixed
     */
    public function getTaxRates()
    {
        $collection = $this->taxRateCollection->toArray();
        return $collection['items'] ?? [];
    }

    /**
     * Gets system info
     *
     * @return array
     * @throws \Magento\Framework\Exception\FileSystemException
     */
    public function getSystemInfo()
    {
        return $this->config->getSystemInformation();
    }

    /**
     * Get stores info
     *
     * @return array
     */
    public function getStoresInformation()
    {
        if ($this->websiteList === null) {
            $this->websiteList = $this->websiteRepository->getList();
        }
        if ($this->storesList === null) {
            $this->storesList = $this->storeRepository->getList();
        }

        $info = [];
        foreach ($this->websiteList as $website) {
            $info['websites'][$website->getId()] = [
                'id' => $website->getId(),
                'code' => $website->getCode(),
                'name' => $website->getName(),
                'default_group_id' => $website->getDefaultGroupId()
            ];
        }
        foreach ($this->storesList as $store) {
            $info['stores'][$store->getId()] = [
                'id' => $store->getId(),
                'code' => $store->getCode(),
                'name' => $store->getName(),
                'website_id' => $store->getWebsiteId(),
                'store_group_id' => $store->getStoreGroupId()
            ];
        }
        ksort($info['websites']);
        ksort($info['stores']);
        return $info;
    }

    /**
     * Get configuration
     *
     * @return array
     */
    public function getConfiguration()
    {
        $websiteList = $this->websiteList === null ? $this->websiteRepository->getList() : $this->websiteList;
        $storeList = $this->storesList === null ? $this->storeRepository->getList() : $this->storesList;
        $allConfig = [];
        $mainConfigs = ['tax', 'euvat'];

        foreach ($mainConfigs as $configSection) {
            $sectionConfig = $this->scopeConfig->getValue($configSection);
            foreach ($sectionConfig as $section => $pathValues) {
                foreach ($pathValues as $path => $value) {
                    foreach ($websiteList as $website) {
                        $scopedConfigValue = $this->scopeConfig->getValue(
                            $configSection.'/'.$section.'/'.$path,
                            'websites',
                            $website
                        );
                        if ($value !== $scopedConfigValue) {
                            $sectionConfig[$section][$path.'_scoped']
                                ['website_'.$website->getCode()] = $scopedConfigValue;
                        }
                    }
                    foreach ($storeList as $store) {
                        $scopedConfigValue = $this->scopeConfig->getValue(
                            $configSection.'/'.$section.'/'.$path,
                            'stores',
                            $store
                        );
                        if ($value !== $scopedConfigValue) {
                            $sectionConfig[$section][$path.'_scoped']['store_'.$store->getCode()] = $scopedConfigValue;
                        }
                    }
                }
            }
            $allConfig[$configSection] = $sectionConfig;
        }

        $specificConfigs = [
            'general/country/eu_countries',
            'customer/create_account/auto_group_assign',
            'customer/create_account/default_group',
            'customer/create_account/tax_calculation_address_type',
            'customer/create_account/viv_disable_auto_group_assign_default',
            'customer/create_account/vat_frontend_visibility',
            'customer/address/taxvat_show',
            'shipping/origin/country_id'
        ];

        foreach ($specificConfigs as $fullConfigPath) {
            $value = $this->scopeConfig->getValue($fullConfigPath);
            $prettyConfigPath = str_replace('/', '_', $fullConfigPath);
            $allConfig['other'][$prettyConfigPath] = $value;
            foreach ($websiteList as $website) {
                $scopedConfigValue = $this->scopeConfig->getValue($fullConfigPath, 'websites', $website);
                if ($value !== $scopedConfigValue) {
                    $allConfig['other'][$prettyConfigPath.'_scoped']
                        ['website_'.$website->getCode()] = $scopedConfigValue;
                }
            }
            foreach ($storeList as $store) {
                $scopedConfigValue = $this->scopeConfig->getValue($fullConfigPath, 'stores', $store);
                if ($value !== $scopedConfigValue) {
                    $allConfig['other'][$prettyConfigPath.'_scoped']['store_'.$store->getCode()] = $scopedConfigValue;
                }
            }
        }

        return $allConfig;
    }
}
