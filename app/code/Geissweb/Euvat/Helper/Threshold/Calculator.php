<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2020 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Helper\Threshold;

use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Logger\Logger;
use Magento\Backend\Model\Session\Quote;
use Magento\Checkout\Model\Session;
use Magento\Customer\Api\Data\AddressInterface;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Pricing\PriceCurrencyInterface;
use Magento\Quote\Api\CartRepositoryInterface;
use Magento\Quote\Model\Quote\Address as QuoteAddress;
use Magento\Sales\Api\Data\OrderAddressInterface;

/**
 * Calculates Thresholds
 */
class Calculator
{
    /**
     * @var \Magento\Quote\Model\Quote $currentQuote
     */
    public $currentQuote = null;
    /**
     * @var Session
     */
    private $checkoutSession;
    /**
     * @var CartRepositoryInterface
     */
    private $cartRepository;
    /**
     * @var PriceCurrencyInterface
     */
    private $priceCurrency;
    /**
     * @var Logger
     */
    private $logger;
    /**
     * @var Quote
     */
    private $backendSessionQuote;
    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    private $configHelper;

    /**
     * @var string
     */
    private $configSection = 'brexit_settings';

    /**
     * ThresholdCalculator constructor.
     *
     * @param Session $checkoutSession
     * @param CartRepositoryInterface $cartRepository
     * @param PriceCurrencyInterface $priceCurrency
     * @param Quote $backendSessionQuote
     * @param \Geissweb\Euvat\Helper\Configuration $configHelper
     * @param Logger $logger
     */
    public function __construct(
        Session $checkoutSession,
        CartRepositoryInterface $cartRepository,
        PriceCurrencyInterface $priceCurrency,
        Quote $backendSessionQuote,
        Configuration $configHelper,
        Logger $logger
    ) {
        $this->checkoutSession = $checkoutSession;
        $this->cartRepository = $cartRepository;
        $this->logger = $logger;
        $this->priceCurrency = $priceCurrency;
        $this->backendSessionQuote = $backendSessionQuote;
        $this->configHelper = $configHelper;

        // Get admin quote
        $adminSessionQuoteId = $this->backendSessionQuote->getQuoteId();
        if (!empty($adminSessionQuoteId)) {
            try {
                $this->currentQuote = $this->cartRepository->get($adminSessionQuoteId);
            } catch (NoSuchEntityException $e) {
                $this->logger->critical($e);
            }
        }

        // Get frontend quote
        $quoteId = $this->checkoutSession->getQuoteId();
        if (!empty($quoteId)) {
            try {
                $this->currentQuote = $this->cartRepository->get($quoteId);
            } catch (NoSuchEntityException $e) {
                $this->logger->critical($e);
            }
        }
    }

    /**
     * Checks if shipping goes to UK
     *
     * @return bool
     */
    public function isDeliveryToUk(): bool
    {
        if ($this->currentQuote !== null) {
            if ($this->currentQuote->getIsVirtual()) {
                return false;
            }
            return $this->isAddressInUK($this->currentQuote->getShippingAddress());
        }

        return false;
    }

    /**
     * Checks if address is in UK
     *
     * @param AddressInterface|OrderAddressInterface|QuoteAddress $address
     *
     * @return bool
     */
    public function isAddressInUK($address): bool
    {
        $countryId = $address->getCountryId();
        $postCode = $address->getPostcode();
        $result = $countryId === 'GB' && $this->isPostcodeInNI($postCode) === false;
        $this->logger->customLog("ThresholdCalculator isAddressInUK $countryId ($postCode): " . (int)$result);
        return $result;
    }

    /**
     * Checks if a postcode belongs to NI
     *
     * @param string|null $postCode
     *
     * @return bool
     */
    public function isPostcodeInNI(?string $postCode) : bool
    {
        if (is_string($postCode)) {
            $postcodeCheck = substr($postCode, 0, 2) === 'BT';
        } else {
            $postcodeCheck = false;
        }
        return $postcodeCheck;
    }

    /**
     * Checks if delivery goes to EU
     *
     * @return bool
     */
    public function isDeliveryToEU(): bool
    {
        if ($this->currentQuote !== null) {
            if ($this->currentQuote->getIsVirtual()) {
                return false;
            }
            return $this->isAddressInEU($this->currentQuote->getShippingAddress());
        }

        return false;
    }

    /**
     * Checks whether address is in EU considering NI as EU country
     *
     * @param AddressInterface|OrderAddressInterface|QuoteAddress $address
     *
     * @return bool
     */
    public function isAddressInEU($address): bool
    {
        $result = false;
        $countryId = $address->getCountryId();
        $postCode = $address->getPostcode();
        if (($this->configHelper->isEuCountry($countryId) && $countryId !== 'GB')
            || ($countryId === 'GB' && $this->isPostcodeInNI($postCode))
        ) {
            $result = true;
        }
        $this->logger->customLog("ThresholdCalculator isAddressInEU $countryId ($postCode): " . (int)$result);
        return $result;
    }

    /**
     * Checks if delivery goes to NI
     *
     * @return bool
     */
    public function isDeliveryToNI(): bool
    {
        if ($this->currentQuote !== null) {
            if ($this->currentQuote->getIsVirtual()) {
                return false;
            }
            return $this->isAddressInNI($this->currentQuote->getShippingAddress());
        }

        return false;
    }

    /**
     * Checks if address is in NI
     *
     * @param AddressInterface|OrderAddressInterface|QuoteAddress $address
     *
     * @return bool
     */
    public function isAddressInNI($address): bool
    {
        $result = false;
        $countryId = $address->getCountryId();
        $postCode = $address->getPostcode();
        if ($countryId === 'GB' && $this->isPostcodeInNI($postCode)) {
            $result = true;
        }
        $this->logger->customLog("ThresholdCalculator isAddressInNI $countryId ($postCode): " . (int)$result);
        return $result;
    }

    /**
     * Checks if cart is above threshold
     *
     * @param int|float $threshold
     * @param string $currencyCode
     *
     * @return bool
     */
    public function isCurrentCartAbove($threshold, string $currencyCode): bool
    {
        if ($this->currentQuote !== null) {
            $value = $this->getPriceInTargetCurrency($this->currentQuote->getSubtotalWithDiscount(), $currencyCode);

            if ($this->configHelper->isIncludeShippingInThresholdCalculation($this->getConfigSection())) {
                $shipping = $this->getPriceInTargetCurrency(
                    $this->currentQuote->getShippingAddress()->getShippingAmount(),
                    $currencyCode
                );
                $value += $shipping;
            }

            return $value >= $threshold;
        }

        return false;
    }

    /**
     * Gets the price in target currency
     *
     * @param int|float $price
     * @param string $currencyCode
     *
     * @return float
     */
    public function getPriceInTargetCurrency($price, string $currencyCode): float
    {
        if ($this->isNeedToConvert($currencyCode)) {
            $convertedPrice = $this->priceCurrency->convert($price, null, $currencyCode);
            $this->logger->customLog("ThresholdCalculator converted $price in $currencyCode: $convertedPrice");
            return $convertedPrice;
        }
        $this->logger->customLog("ThresholdCalculator price is $price $currencyCode");
        return $price;
    }

    /**
     * Checks if we need to convert the currency
     *
     * @param string $targetCurrencyCode
     *
     * @return bool
     */
    private function isNeedToConvert(string $targetCurrencyCode): bool
    {
        return $this->priceCurrency->getCurrency()->getCurrencyCode() !== $targetCurrencyCode;
    }

    /**
     * Gets the config section needed
     *
     * @return string
     */
    public function getConfigSection(): string
    {
        return $this->configSection;
    }

    /**
     * Sets the config section
     *
     * @param string $configSection
     */
    public function setConfigSection(string $configSection): void
    {
        $this->configSection = $configSection;
    }
}
