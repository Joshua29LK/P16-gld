<?php
/**
 * BSS Commerce Co.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://bsscommerce.com/Bss-Commerce-License.txt
 *
 * @category   BSS
 * @package    Bss_Faqs
 * @author     Extension Team
 * @copyright  Copyright (c) 2017-2018 BSS Commerce Co. ( http://bsscommerce.com )
 * @license    http://bsscommerce.com/Bss-Commerce-License.txt
 */
namespace Bss\Faqs\Block\Adminhtml\Faqs\TabContent;

use Magento\Backend\Block\Widget\Form\Generic;
use Magento\Framework\DataObject;

class AbstractAssignTab extends Generic
{
    /**
     * @var null
     */
    protected $allStores = null;

    /**
     * @var bool
     */
    protected $requireStoresFilter = false;

    /**
     * @var \Magento\Backend\Helper\Data|null
     */
    protected $adminhtmlData = null;

    /**
     * @var \Magento\Store\Model\System\Store
     */
    protected $systemStore;

    /**
     * @var \Bss\Faqs\Model\FaqsFactory
     */
    protected $faqsFactory;

    /**
     * @var \Magento\Config\Model\Config\Source\Yesno
     */
    protected $optionYesnoProvider;

    /**
     * @var \Magento\Cms\Model\Wysiwyg\Config
     */
    protected $wysiwygConfig;

    /**
     * Form constructor.
     * @param \Magento\Backend\Block\Widget\Context $context
     * @param \Magento\Framework\Registry $registry
     * @param \Magento\Framework\Data\FormFactory $formFactory
     * @param \Magento\Config\Model\Config\Source\Yesno $optionYesnoProvider
     * @param \Bss\Faqs\Model\FaqsFactory $faqsFactory
     * @param \Magento\Store\Model\System\Store $systemStore
     * @param \Magento\Backend\Helper\Data $adminhtmlData
     * @param \Magento\Cms\Model\Wysiwyg\Config $wysiwygConfig
     * @param array $data
     */
    public function __construct(
        \Magento\Backend\Block\Widget\Context $context,
        \Magento\Framework\Registry $registry,
        \Magento\Framework\Data\FormFactory $formFactory,
        \Magento\Config\Model\Config\Source\Yesno $optionYesnoProvider,
        \Bss\Faqs\Model\FaqsFactory $faqsFactory,
        \Magento\Store\Model\System\Store $systemStore,
        \Magento\Backend\Helper\Data $adminhtmlData,
        \Magento\Cms\Model\Wysiwyg\Config $wysiwygConfig,
        array $data = []
    ) {
        $this->optionYesnoProvider = $optionYesnoProvider;
        $this->faqsFactory = $faqsFactory;
        $this->systemStore = $systemStore;
        $this->adminhtmlData = $adminhtmlData;
        $this->wysiwygConfig = $wysiwygConfig;
        parent::__construct($context, $registry, $formFactory, $data);
    }

    /**
     * Get Yes/no Provider
     *
     * @return array
     */
    public function getOptionYesnoProvider()
    {
        return $this->optionYesnoProvider->toArray();
    }

    /**
     * Get wysiwyg config
     *
     * @return DataObject
     */
    public function getWysiwygConfig()
    {
        return $this->wysiwygConfig->getConfig();
    }

    /**
     * Get FAQ model
     *
     * @return \Bss\Faqs\Model\Faqs
     */
    public function getModel()
    {
        if ($this->_coreRegistry->registry('faq_id') == null) {
            return $this->faqsFactory->create();
        }
        return $this->faqsFactory->create()->load($this->_coreRegistry->registry('faq_id'));
    }

    /**
     * Prepare store element
     *
     * @param mixed $fieldset
     */
    public function _prepareStoreElement($fieldset)
    {
        if ($this->_storeManager->isSingleStoreMode()) {
            $fieldset->addField(
                'store_id',
                'hidden',
                ['name' => 'store_id', 'value' => $this->_storeManager->getStore(true)->getId()]
            );
        } else {
            $storeElement = $fieldset->addField(
                'store_id',
                'multiselect',
                [
                    'label' => __('Store'),
                    'title' => __('Store'),
                    'name' => 'store_id',
                    'value' => $this->getModel()['store_id'],
                    'required' => true
                ]
            );

            try {
                $stores = $this->_getStoresListRestrictedByEntityStores($this->getAllStores());
            } catch (\Magento\Framework\Exception\LocalizedException $e) {
                $stores = [];
                $storeElement->setAfterElementHtml($e->getMessage());
            }
            $storeElement->setValues($stores);
            if ($this->getModel()->getIsAutogenerated()) {
                $storeElement->setReadonly(true);
            }
            /** @var $renderer \Magento\Backend\Block\Store\Switcher\Form\Renderer\Fieldset\Element */
            $renderer = $this->getLayout()->createBlock(
                \Magento\Backend\Block\Store\Switcher\Form\Renderer\Fieldset\Element::class
            );
            $storeElement->setRenderer($renderer);
        }
    }

    /**
     * Get all stores
     *
     * @return array|null
     */
    public function getAllStores()
    {
        if ($this->allStores === null) {
            $this->allStores = $this->systemStore->getStoreValuesForForm();
        }

        return $this->allStores;
    }

    /**
     * Get stores list restricted by entity stores
     *
     * @param array $entityStores
     * @return array|null
     */
    public function _getStoresListRestrictedByEntityStores(array $entityStores)
    {
        $stores = $this->getAllStores();
        if ($this->requireStoresFilter) {
            foreach ($stores as $i => $store) {
                if (isset($store['value']) && $store['value']) {
                    $found = false;
                    foreach ($store['value'] as $k => $v) {
                        if (isset($v['value']) && in_array($v['value'], $entityStores)) {
                            $found = true;
                        } else {
                            unset($stores[$i]['value'][$k]);
                        }
                    }
                    if (!$found) {
                        unset($stores[$i]);
                    }
                }
            }
        }

        return $stores;
    }
}
